from django.shortcuts import render
from django.http import HttpResponseRedirect
from django.core.files.storage import FileSystemStorage
from django.http import JsonResponse
import cv2 as cv
import base64
import re
import numpy as np
from django.core.files.base import ContentFile
import sys

PY3 = sys.version_info[0] == 3

if PY3:
    xrange = range

# Create your views here.
def index(request):
    if request.method == 'POST' and 'imageData' in request.POST:   

        imageData = request.POST.get('imageData')
        format, imgstr = imageData.split(';base64,') 
        
        #ext of file
        ext = format.split('/')[-1] 

        message = ""
        # If none or len 0, means illegal image data
        if imgstr == None or len(imgstr) == 0:
            # PRINT ERROR MESSAGE HERE
            message= "file hinh anh khong ton tai"

        # Decode the 64 bit string into 32 bit
        data = base64.b64decode(imgstr)
        fs = FileSystemStorage()

        #save file
        fs.save(request.POST.get('fileName') + "_template." + ext, ContentFile(data))
        return JsonResponse({'message':message})

    return render(request, 'pages/home.html')

def resize(request):
    return render(request, 'pages/resize.html')


def checkShape(request):
    if request.method == 'POST' and 'imageData' in request.POST:   
        imageData = request.POST.get('imageData')
        format, imgstr = imageData.split(';base64,') 
      
        message = ""
        # If none or len 0, means illegal image data
        if imgstr == None or len(imgstr) == 0:
            # PRINT ERROR MESSAGE HERE
            message= "file hinh anh khong ton tai"

        # Decode the 64 bit string into 32 bit
        data = base64.b64decode(imgstr)        
        image = np.asarray(bytearray(data), dtype="uint8")
        image = cv.imdecode(image, cv.IMREAD_COLOR)

        contour = find_contour(image,  request.POST.get('clickX'),  request.POST.get('clickY'))
        x,y,w,h = cv.boundingRect(contour)
        
    return JsonResponse({'x':x,'y':y,'w':w,'h':h})
    
def angle_cos(p0, p1, p2):
    d1, d2 = (p0-p1).astype('float'), (p2-p1).astype('float')
    return abs( np.dot(d1, d2) / np.sqrt( np.dot(d1, d1)*np.dot(d2, d2) ) )

def find_contour(img, clickX, clickY):
    minimum = 0
    img = cv.GaussianBlur(img, (5, 5), 0)
    contour=[]
    for gray in cv.split(img):
        for thrs in xrange(0, 255, 26):
            if thrs == 0:
                bin = cv.Canny(gray, 0, 50, apertureSize=5)
                bin = cv.dilate(bin, None)
            else:
                _retval, bin = cv.threshold(gray, thrs, 255, cv.THRESH_BINARY)
            bin, contours, _hierarchy = cv.findContours(bin, cv.RETR_LIST, cv.CHAIN_APPROX_SIMPLE)
            for cnt in contours:
                #cnt_len = cv.arcLength(cnt, True)
                #cnt = cv.approxPolyDP(cnt, 0.02*cnt_len, True)
                #if len(cnt) == 4 and cv.contourArea(cnt) > 1000 and cv.isContourConvex(cnt):
                    #cnt = cnt.reshape(-1, 2)
                    if cv.pointPolygonTest(cnt, (float(clickX), float(clickY)), True) >= 0 and \
                      (minimum == 0 or cv.contourArea(cnt) < minimum) :
                        minimum = cv.contourArea(cnt)
                        contour = cnt
    return contour